_printf Manual

int _printf(const char \*format, ...);

Produces output according to a format

. Synopsis

#include "main.h"

. Description

The _printf function writes output to stdout under the control of a format string that specifies how subsequent arguments (if any) are converted for output.

- Parameters

format: A character string that contains a format specification.
...: Optional arguments, which are used in the format specification.

. Return Value

On success, the total number of characters printed is returned. On error, a negative value is returned.

. Format Specification

The format string is a character string, beginning and ending in its initial shift state, if any. The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %. The format string may contain either formatted or unformatted data, or both. The unformatted data are simply copied to the output stream.

The format specification includes, in sequence, the following elements:

1. Zero or more flags (in any order) that modify the meaning of the conversion specification.

2. An optional minimum field width. If the converted value has fewer characters than the field width, it is padded with spaces on the left (or right, if the left-adjustment flag has been given) to reach the field width.
3. An optional precision that gives the maximum number of characters to be written for numeric types. For string types, the precision gives the maximum number of characters to be written. For the c conversion character, the precision gives the maximum number of characters to be written.
4. An optional length modifier that specifies the size of the argument.
5. A conversion character that specifies the type of conversion to be applied.

- Conversion Specifications

The conversion specifications are:

- %c: The int argument is converted to an unsigned char, and the resulting character is written.
- %s: The argument shall be a pointer to an array of character type. Characters from the array are written up to (but not including) a terminating null character.
- %d, %i: The int argument is converted to signed decimal in the style [-]dddd.
- %u: The unsigned int argument is converted to unsigned decimal in the style dddd.
- %%: A % is written. No argument is converted.

// Example


#include "main.h"

int main() {
    int a = 12345;
    _printf("The value of a is: %d\n", a);
    return 0;
}
//

Notes

This implementation of _printf supports a subset of the functionality provided by the standard printf function.

Bugs
There are no known bugs.

---------------------------------------------------------------------------------

_putchar Manual

NAME

_putchar - Writes a character to stdout.

. SYNOPSIS

#include "main.h"

int _putchar(char c);

. DESCRIPTION

The _putchar function writes a character c to the standard output stream (stdout)

 - RETURN VALUE

On success, the number of characters printed is returned. On error, -1 is returned, and errno is set appropriately.

- ERRORS

In the current implementation, there are no error conditions defined.

//
EXAMPLES

An example of using _putchar:

#include "main.h"

int main(void)
{
    _putchar('H');
    _putchar('e');
    _putchar('l');
    _putchar('l');
    _putchar('o');
    _putchar('\n');

    return 0;
}

---------------------------------------------------------------------------------

. Synopsis

`#include "main.h"`

`int _print_int(long int n);`

### Description

The '_print_int' function prints an integer 'n' to stdout and returns the number of characters printed.

. Parameters

`n`:
The integer to be printed.

. Return Value

The number of characters printed, excluding the null byte used to end every output line.

. Behavior

- If `n` is negative, a leading minus sign is printed.
- The integer is then printed digit by digit, from most to least significant, with no space or other separator between digits.
- If `n` is zero, a single digit `0` is printed.

. Examples

_print_int(-12345) would print `-12345` and return `6`.
--------------------------------------------------------------------------------
. Notes

The function uses the helper function `_putchar` to print each character, which is assumed to write a single character to stdout and return the character written.

---------------------------------------------------------------------------------

Author
- Ignacio Necasek,
- Matthew Hernandez
- Alexis Rodriguez

Copyright
Copyright (C) 2024 holbertonschool-printf

Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.     
